
simpleserial-target-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000832  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  00000832  000008c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000062  00802010  00802010  000008d6  2**0
                  ALLOC
  3 .comment      00000026  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000108  00000000  00000000  00000940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00003a9f  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000028a2  00000000  00000000  000044e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001988  00000000  00000000  00006d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000002c8  00000000  00000000  00008714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001f2a  00000000  00000000  000089dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00000dce  00000000  00000000  0000a906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000a8  00000000  00000000  0000b6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__ctors_end>
   4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
   8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
   c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  40:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  48:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  4c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  68:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  6c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  70:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  74:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  78:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  7c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  80:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  84:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  88:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  8c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  90:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  94:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  98:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  9c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  a0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  a4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  a8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  ac:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  b0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  b4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  b8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  bc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  c0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  c4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  c8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  cc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  d0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  d4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  d8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  dc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  e0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  e4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  e8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  ec:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  f0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  f4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  f8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  fc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 100:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 104:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 108:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 10c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 110:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 114:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 118:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 11c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 120:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 124:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 128:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 12c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 130:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 134:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 138:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 13c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 140:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 144:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 148:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 14c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 150:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 154:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 158:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 15c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 160:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 164:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 168:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 16c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 170:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 174:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 178:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 17c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 180:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 184:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 188:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 18c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 190:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 194:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 198:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 19c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1a0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1a4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1a8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1ac:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1b0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1b4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1b8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1bc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1c0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1c4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 3a 01 	jmp	0x274	; 0x274 <check_version>
 1cc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <handle>
 1d0:	0c 94 04 02 	jmp	0x408	; 0x408 <ss_num_commands>
 1d4:	0c 94 18 02 	jmp	0x430	; 0x430 <ss_get_commands>

000001d8 <__ctors_end>:
 1d8:	11 24       	eor	r1, r1
 1da:	1f be       	out	0x3f, r1	; 63
 1dc:	cf ef       	ldi	r28, 0xFF	; 255
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	df e3       	ldi	r29, 0x3F	; 63
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	0c bf       	out	0x3c, r16	; 60

000001e8 <__do_copy_data>:
 1e8:	10 e2       	ldi	r17, 0x20	; 32

000001ea <.Loc.1>:
 1ea:	a0 e0       	ldi	r26, 0x00	; 0

000001ec <.Loc.2>:
 1ec:	b0 e2       	ldi	r27, 0x20	; 32

000001ee <.Loc.3>:
 1ee:	e2 e3       	ldi	r30, 0x32	; 50

000001f0 <.Loc.4>:
 1f0:	f8 e0       	ldi	r31, 0x08	; 8

000001f2 <.Loc.5>:
 1f2:	00 e0       	ldi	r16, 0x00	; 0

000001f4 <.Loc.6>:
 1f4:	0b bf       	out	0x3b, r16	; 59

000001f6 <.Loc.7>:
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <.L__do_copy_data_start>

000001f8 <.L__do_copy_data_loop>:
 1f8:	07 90       	elpm	r0, Z+

000001fa <.Loc.9>:
 1fa:	0d 92       	st	X+, r0

000001fc <.L__do_copy_data_start>:
 1fc:	a0 31       	cpi	r26, 0x10	; 16

000001fe <.Loc.11>:
 1fe:	b1 07       	cpc	r27, r17

00000200 <.Loc.12>:
 200:	d9 f7       	brne	.-10     	; 0x1f8 <.L__do_copy_data_loop>

00000202 <__do_clear_bss>:
 202:	20 e2       	ldi	r18, 0x20	; 32

00000204 <.Loc.1>:
 204:	a0 e1       	ldi	r26, 0x10	; 16

00000206 <.Loc.2>:
 206:	b0 e2       	ldi	r27, 0x20	; 32

00000208 <.Loc.3>:
 208:	01 c0       	rjmp	.+2      	; 0x20c <.Loc.5>

0000020a <.Loc.4>:
 20a:	1d 92       	st	X+, r1

0000020c <.Loc.5>:
 20c:	a2 37       	cpi	r26, 0x72	; 114

0000020e <.Loc.6>:
 20e:	b2 07       	cpc	r27, r18

00000210 <.Loc.7>:
 210:	e1 f7       	brne	.-8      	; 0x20a <.Loc.4>

00000212 <L0^A>:
 212:	0e 94 04 04 	call	0x808	; 0x808 <main>
 216:	0c 94 17 04 	jmp	0x82e	; 0x82e <_exit>

0000021a <__bad_interrupt>:
 21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <handle>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 21e:	cf 93       	push	r28

00000220 <.LCFI0>:
 220:	df 93       	push	r29

00000222 <.LCFI1>:
 222:	00 d0       	rcall	.+0      	; 0x224 <L0^A>

00000224 <L0^A>:
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62

00000228 <.LCFI3>:
  volatile uint8_t result = 0;
 228:	1b 82       	std	Y+3, r1	; 0x03

0000022a <.Loc.4>:

  // Start measurement.
  trigger_high();
 22a:	81 e0       	ldi	r24, 0x01	; 1

0000022c <.LVL1>:
 22c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>

00000230 <.LBB2>:

  // Cause more clock cycles to happen the higher the scmd is
  // We need 'volatile' here because we don't want the compiler to optimize the
  // loop out.
  for (volatile uint8_t i = 0; i < 255; i++) {
 230:	1a 82       	std	Y+2, r1	; 0x02

00000232 <.Loc.9>:
    if (i == scmd) {
        result = scmd * scmd;
 232:	66 9f       	mul	r22, r22
 234:	90 2d       	mov	r25, r0
 236:	11 24       	eor	r1, r1

00000238 <.L2>:
  for (volatile uint8_t i = 0; i < 255; i++) {
 238:	8a 81       	ldd	r24, Y+2	; 0x02

0000023a <.Loc.12>:
 23a:	8f 3f       	cpi	r24, 0xFF	; 255
 23c:	99 f4       	brne	.+38     	; 0x264 <.L4>

0000023e <.LBE2>:
    }
  }

  // Stop measurement.
  trigger_low();
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

00000244 <.Loc.14>:

  // For now we can just return the result back to the user.
  uint8_t buff[1] = { result };
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	89 83       	std	Y+1, r24	; 0x01

00000248 <.Loc.16>:
  simpleserial_put('r', 1, buff);
 248:	ae 01       	movw	r20, r28

0000024a <.LVL2>:
 24a:	4f 5f       	subi	r20, 0xFF	; 255
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
 24e:	61 e0       	ldi	r22, 0x01	; 1

00000250 <.LVL3>:
 250:	82 e7       	ldi	r24, 0x72	; 114
 252:	0e 94 d6 01 	call	0x3ac	; 0x3ac <simpleserial_put>

00000256 <.LVL4>:

  return 0;
}
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	23 96       	adiw	r28, 0x03	; 3
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <.L4>:
    if (i == scmd) {
 264:	8a 81       	ldd	r24, Y+2	; 0x02

00000266 <.Loc.23>:
 266:	86 13       	cpse	r24, r22
 268:	01 c0       	rjmp	.+2      	; 0x26c <.L3>

0000026a <.Loc.24>:
        result = scmd * scmd;
 26a:	9b 83       	std	Y+3, r25	; 0x03

0000026c <.L3>:
  for (volatile uint8_t i = 0; i < 255; i++) {
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	8a 83       	std	Y+2, r24	; 0x02
 272:	e2 cf       	rjmp	.-60     	; 0x238 <.L2>

00000274 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 274:	81 e0       	ldi	r24, 0x01	; 1

00000276 <.LVL1>:
 276:	08 95       	ret

00000278 <ss_crc>:
{
 278:	28 2f       	mov	r18, r24

0000027a <.LVL3>:
	uint8_t crc = 0x00;
 27a:	80 e0       	ldi	r24, 0x00	; 0

0000027c <.LVL4>:
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 27c:	46 ea       	ldi	r20, 0xA6	; 166

0000027e <.L3>:
	while (len--) {
 27e:	61 50       	subi	r22, 0x01	; 1
 280:	08 f4       	brcc	.+2      	; 0x284 <.L7>

00000282 <.Loc.13>:
}
 282:	08 95       	ret

00000284 <.L7>:
		crc ^= *buf++;
 284:	e2 2f       	mov	r30, r18
 286:	f9 2f       	mov	r31, r25

00000288 <.LVL7>:
 288:	91 91       	ld	r25, Z+

0000028a <.LVL8>:
 28a:	89 27       	eor	r24, r25

0000028c <.LVL9>:
 28c:	28 e0       	ldi	r18, 0x08	; 8
 28e:	30 e0       	ldi	r19, 0x00	; 0

00000290 <.L6>:
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 290:	87 ff       	sbrs	r24, 7
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <.L4>

00000294 <.Loc.23>:
 294:	88 0f       	add	r24, r24

00000296 <.LVL11>:
 296:	84 27       	eor	r24, r20

00000298 <.L5>:
		for (k = 0; k < 8; k++) {
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	31 09       	sbc	r19, r1

0000029c <.LVL13>:
 29c:	c9 f7       	brne	.-14     	; 0x290 <.L6>

0000029e <.Loc.28>:
		crc ^= *buf++;
 29e:	2e 2f       	mov	r18, r30

000002a0 <.LVL14>:
 2a0:	9f 2f       	mov	r25, r31
 2a2:	ed cf       	rjmp	.-38     	; 0x27e <.L3>

000002a4 <.L4>:
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 2a4:	88 0f       	add	r24, r24

000002a6 <.LVL16>:
 2a6:	f8 cf       	rjmp	.-16     	; 0x298 <.L5>

000002a8 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 2a8:	9c 01       	movw	r18, r24
 2aa:	fa 01       	movw	r30, r20

000002ac <.LBB2>:
	for(int i = 0; i < len; i++)
 2ac:	db 01       	movw	r26, r22

000002ae <.Loc.37>:
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	40 e0       	ldi	r20, 0x00	; 0

000002b2 <.L10>:
 2b2:	42 17       	cp	r20, r18
 2b4:	53 07       	cpc	r21, r19
 2b6:	1c f0       	brlt	.+6      	; 0x2be <.L20>

000002b8 <.LBE2>:
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0

000002bc <.Loc.41>:
}
 2bc:	08 95       	ret

000002be <.L20>:
		char n_hi = ascii_buf[2*i];
 2be:	8c 91       	ld	r24, X

000002c0 <.LVL20>:
		char n_lo = ascii_buf[2*i+1];
 2c0:	11 96       	adiw	r26, 0x01	; 1
 2c2:	9c 91       	ld	r25, X
 2c4:	11 97       	sbiw	r26, 0x01	; 1

000002c6 <.LVL21>:
		if(n_lo >= '0' && n_lo <= '9')
 2c6:	60 ed       	ldi	r22, 0xD0	; 208
 2c8:	69 0f       	add	r22, r25

000002ca <.Loc.48>:
 2ca:	6a 30       	cpi	r22, 0x0A	; 10
 2cc:	78 f4       	brcc	.+30     	; 0x2ec <.L11>

000002ce <.Loc.49>:
			data_buf[i] = n_lo - '0';
 2ce:	60 83       	st	Z, r22

000002d0 <.L12>:
		if(n_hi >= '0' && n_hi <= '9')
 2d0:	90 ed       	ldi	r25, 0xD0	; 208
 2d2:	98 0f       	add	r25, r24

000002d4 <.Loc.53>:
 2d4:	9a 30       	cpi	r25, 0x0A	; 10
 2d6:	d0 f4       	brcc	.+52     	; 0x30c <.L16>

000002d8 <.Loc.54>:
			data_buf[i] |= (n_hi - '0') << 4;
 2d8:	82 95       	swap	r24

000002da <.LVL23>:
 2da:	80 7f       	andi	r24, 0xF0	; 240

000002dc <.L22>:
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 2dc:	90 81       	ld	r25, Z
 2de:	89 2b       	or	r24, r25
 2e0:	80 83       	st	Z, r24

000002e2 <.LBE3>:
	for(int i = 0; i < len; i++)
 2e2:	4f 5f       	subi	r20, 0xFF	; 255
 2e4:	5f 4f       	sbci	r21, 0xFF	; 255

000002e6 <.Loc.60>:
 2e6:	31 96       	adiw	r30, 0x01	; 1
 2e8:	12 96       	adiw	r26, 0x02	; 2
 2ea:	e3 cf       	rjmp	.-58     	; 0x2b2 <.L10>

000002ec <.L11>:
		else if(n_lo >= 'A' && n_lo <= 'F')
 2ec:	6f eb       	ldi	r22, 0xBF	; 191
 2ee:	69 0f       	add	r22, r25

000002f0 <.Loc.63>:
 2f0:	66 30       	cpi	r22, 0x06	; 6
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <.L13>

000002f4 <.Loc.64>:
			data_buf[i] = n_lo - 'A' + 10;
 2f4:	97 53       	subi	r25, 0x37	; 55

000002f6 <.L21>:
			data_buf[i] = n_lo - 'a' + 10;
 2f6:	90 83       	st	Z, r25

000002f8 <.LVL27>:
 2f8:	eb cf       	rjmp	.-42     	; 0x2d0 <.L12>

000002fa <.L13>:
		else if(n_lo >= 'a' && n_lo <= 'f')
 2fa:	6f e9       	ldi	r22, 0x9F	; 159
 2fc:	69 0f       	add	r22, r25

000002fe <.Loc.70>:
 2fe:	66 30       	cpi	r22, 0x06	; 6
 300:	18 f0       	brcs	.+6      	; 0x308 <.L14>

00000302 <.L19>:
			return 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0

00000306 <.LVL30>:
 306:	08 95       	ret

00000308 <.L14>:
			data_buf[i] = n_lo - 'a' + 10;
 308:	97 55       	subi	r25, 0x57	; 87

0000030a <.LVL32>:
 30a:	f5 cf       	rjmp	.-22     	; 0x2f6 <.L21>

0000030c <.L16>:
		else if(n_hi >= 'A' && n_hi <= 'F')
 30c:	9f eb       	ldi	r25, 0xBF	; 191
 30e:	98 0f       	add	r25, r24

00000310 <.Loc.78>:
 310:	96 30       	cpi	r25, 0x06	; 6
 312:	40 f4       	brcc	.+16     	; 0x324 <.L18>

00000314 <.Loc.79>:
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 314:	87 53       	subi	r24, 0x37	; 55
 316:	99 0b       	sbc	r25, r25

00000318 <.L23>:
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 318:	64 e0       	ldi	r22, 0x04	; 4

0000031a <.L1^B1>:
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e1 f7       	brne	.-8      	; 0x31a <.L1^B1>
 322:	dc cf       	rjmp	.-72     	; 0x2dc <.L22>

00000324 <.L18>:
		else if(n_hi >= 'a' && n_hi <= 'f')
 324:	9f e9       	ldi	r25, 0x9F	; 159
 326:	98 0f       	add	r25, r24

00000328 <.Loc.84>:
 328:	96 30       	cpi	r25, 0x06	; 6
 32a:	58 f7       	brcc	.-42     	; 0x302 <.L19>

0000032c <.Loc.85>:
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 32c:	87 55       	subi	r24, 0x57	; 87
 32e:	99 0b       	sbc	r25, r25

00000330 <.LVL36>:
 330:	f3 cf       	rjmp	.-26     	; 0x318 <.L23>

00000332 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 332:	db 01       	movw	r26, r22

00000334 <.Loc.90>:
	if(num_commands >= MAX_SS_CMDS)
 334:	60 91 70 20 	lds	r22, 0x2070	; 0x802070 <num_commands>
 338:	70 91 71 20 	lds	r23, 0x2071	; 0x802071 <num_commands+0x1>

0000033c <.LVL38>:
 33c:	60 31       	cpi	r22, 0x10	; 16
 33e:	71 05       	cpc	r23, r1
 340:	d4 f4       	brge	.+52     	; 0x376 <.L27>

00000342 <.Loc.93>:
		return 1;

	if(len >= MAX_SS_LEN)
 342:	a0 3c       	cpi	r26, 0xC0	; 192
 344:	b1 05       	cpc	r27, r1
 346:	b8 f4       	brcc	.+46     	; 0x376 <.L27>

00000348 <.Loc.95>:
		return 1;

	commands[num_commands].c   = c;
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	96 9f       	mul	r25, r22
 34c:	f0 01       	movw	r30, r0
 34e:	97 9f       	mul	r25, r23
 350:	f0 0d       	add	r31, r0
 352:	11 24       	eor	r1, r1
 354:	e0 5f       	subi	r30, 0xF0	; 240
 356:	ff 4d       	sbci	r31, 0xDF	; 223
 358:	80 83       	st	Z, r24

0000035a <.Loc.97>:
	commands[num_commands].len = len;
 35a:	a1 83       	std	Z+1, r26	; 0x01
 35c:	b2 83       	std	Z+2, r27	; 0x02

0000035e <.Loc.100>:
	commands[num_commands].fp  = fp;
 35e:	43 83       	std	Z+3, r20	; 0x03
 360:	54 83       	std	Z+4, r21	; 0x04

00000362 <.Loc.101>:
	commands[num_commands].flags = fl;
 362:	25 83       	std	Z+5, r18	; 0x05

00000364 <.Loc.103>:
	num_commands++;
 364:	6f 5f       	subi	r22, 0xFF	; 255
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	60 93 70 20 	sts	0x2070, r22	; 0x802070 <num_commands>
 36c:	70 93 71 20 	sts	0x2071, r23	; 0x802071 <num_commands+0x1>

00000370 <.Loc.105>:

	return 0;
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	80 e0       	ldi	r24, 0x00	; 0

00000374 <.LVL39>:
 374:	08 95       	ret

00000376 <.L27>:
		return 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0

0000037a <.LVL41>:
}
 37a:	08 95       	ret

0000037c <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	0c 94 99 01 	jmp	0x332	; 0x332 <simpleserial_addcmd_flags>

00000382 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
 382:	4a e3       	ldi	r20, 0x3A	; 58
 384:	51 e0       	ldi	r21, 0x01	; 1
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	86 e7       	ldi	r24, 0x76	; 118
 38c:	0e 94 be 01 	call	0x37c	; 0x37c <simpleserial_addcmd>

00000390 <.LVL44>:
    simpleserial_addcmd('w', 0, ss_get_commands);
 390:	48 e1       	ldi	r20, 0x18	; 24
 392:	52 e0       	ldi	r21, 0x02	; 2
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	87 e7       	ldi	r24, 0x77	; 119
 39a:	0e 94 be 01 	call	0x37c	; 0x37c <simpleserial_addcmd>

0000039e <.LVL45>:
    simpleserial_addcmd('y', 0, ss_num_commands);
 39e:	44 e0       	ldi	r20, 0x04	; 4
 3a0:	52 e0       	ldi	r21, 0x02	; 2
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	89 e7       	ldi	r24, 0x79	; 121
 3a8:	0c 94 be 01 	jmp	0x37c	; 0x37c <simpleserial_addcmd>

000003ac <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 3ac:	ff 92       	push	r15

000003ae <.LCFI0>:
 3ae:	0f 93       	push	r16

000003b0 <.LCFI1>:
 3b0:	1f 93       	push	r17

000003b2 <.LCFI2>:
 3b2:	cf 93       	push	r28

000003b4 <.LCFI3>:
 3b4:	df 93       	push	r29

000003b6 <.LCFI4>:
 3b6:	06 2f       	mov	r16, r22
 3b8:	f4 2e       	mov	r15, r20
 3ba:	15 2f       	mov	r17, r21

000003bc <.Loc.120>:
	// Write first character
	putch(c);
 3bc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <output_ch_0>

000003c0 <.LBB6>:

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 3c0:	cf 2d       	mov	r28, r15
 3c2:	d1 2f       	mov	r29, r17
 3c4:	0c 0f       	add	r16, r28
 3c6:	1d 2f       	mov	r17, r29
 3c8:	11 1d       	adc	r17, r1

000003ca <.L31>:
 3ca:	c0 17       	cp	r28, r16
 3cc:	d1 07       	cpc	r29, r17
 3ce:	41 f4       	brne	.+16     	; 0x3e0 <.L32>

000003d0 <.LBE6>:
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 3d0:	8a e0       	ldi	r24, 0x0A	; 10

000003d2 <.Loc.127>:
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28

000003d6 <.LVL50>:
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15

000003dc <.Loc.129>:
	putch('\n');
 3dc:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <output_ch_0>

000003e0 <.L32>:
		putch(hex_lookup[output[i] >> 4 ]);
 3e0:	e9 91       	ld	r30, Y+

000003e2 <.LVL52>:
 3e2:	e2 95       	swap	r30
 3e4:	ef 70       	andi	r30, 0x0F	; 15
 3e6:	f0 e0       	ldi	r31, 0x00	; 0

000003e8 <.Loc.133>:
 3e8:	e0 50       	subi	r30, 0x00	; 0
 3ea:	f0 4e       	sbci	r31, 0xE0	; 224
 3ec:	80 81       	ld	r24, Z
 3ee:	0e 94 59 03 	call	0x6b2	; 0x6b2 <output_ch_0>

000003f2 <.LVL53>:
		putch(hex_lookup[output[i] & 0xF]);
 3f2:	fe 01       	movw	r30, r28
 3f4:	31 97       	sbiw	r30, 0x01	; 1

000003f6 <.Loc.136>:
 3f6:	e0 81       	ld	r30, Z
 3f8:	ef 70       	andi	r30, 0x0F	; 15
 3fa:	f0 e0       	ldi	r31, 0x00	; 0

000003fc <.Loc.137>:
 3fc:	e0 50       	subi	r30, 0x00	; 0
 3fe:	f0 4e       	sbci	r31, 0xE0	; 224
 400:	80 81       	ld	r24, Z
 402:	0e 94 59 03 	call	0x6b2	; 0x6b2 <output_ch_0>

00000406 <.LVL54>:
	for(int i = 0; i < size; i++)
 406:	e1 cf       	rjmp	.-62     	; 0x3ca <.L31>

00000408 <ss_num_commands>:
{
 408:	cf 93       	push	r28

0000040a <.LCFI5>:
 40a:	df 93       	push	r29

0000040c <.LCFI6>:
 40c:	0f 92       	push	r0

0000040e <.LCFI7>:
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62

00000412 <.LCFI8>:
    uint8_t ncmds = num_commands & 0xFF;
 412:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <num_commands>

00000416 <.LVL56>:
 416:	89 83       	std	Y+1, r24	; 0x01

00000418 <.Loc.145>:
    simpleserial_put('r', 0x01, &ncmds);
 418:	ae 01       	movw	r20, r28
 41a:	4f 5f       	subi	r20, 0xFF	; 255
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	61 e0       	ldi	r22, 0x01	; 1

00000420 <.LVL57>:
 420:	82 e7       	ldi	r24, 0x72	; 114
 422:	0e 94 d6 01 	call	0x3ac	; 0x3ac <simpleserial_put>

00000426 <.LVL58>:
}
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <ss_get_commands>:
{
 430:	cf 93       	push	r28

00000432 <.LCFI9>:
 432:	df 93       	push	r29

00000434 <.LCFI10>:
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62

00000438 <.LCFI11>:
 438:	e0 97       	sbiw	r28, 0x30	; 48

0000043a <.LCFI12>:
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	de bf       	out	0x3e, r29	; 62

0000043e <.LBB8>:
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 43e:	20 91 70 20 	lds	r18, 0x2070	; 0x802070 <num_commands>
 442:	30 91 71 20 	lds	r19, 0x2071	; 0x802071 <num_commands+0x1>
 446:	b9 01       	movw	r22, r18

00000448 <.LVL61>:
 448:	77 27       	eor	r23, r23

0000044a <.Loc.156>:
 44a:	40 e0       	ldi	r20, 0x00	; 0

0000044c <.Loc.157>:
        repr_cmd_buf[i].c = commands[i].c;
 44c:	56 e0       	ldi	r21, 0x06	; 6

0000044e <.L35>:
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 44e:	84 2f       	mov	r24, r20
 450:	90 e0       	ldi	r25, 0x00	; 0

00000452 <.Loc.160>:
 452:	86 17       	cp	r24, r22
 454:	97 07       	cpc	r25, r23
 456:	84 f0       	brlt	.+32     	; 0x478 <.L36>

00000458 <.LBE8>:
    simpleserial_put('r', num_commands * 0x03, &repr_cmd_buf);
 458:	62 2f       	mov	r22, r18
 45a:	66 0f       	add	r22, r22
 45c:	62 0f       	add	r22, r18
 45e:	ae 01       	movw	r20, r28

00000460 <.LVL63>:
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	82 e7       	ldi	r24, 0x72	; 114

00000466 <.LVL64>:
 466:	0e 94 d6 01 	call	0x3ac	; 0x3ac <simpleserial_put>

0000046a <.LVL65>:
}
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	e0 96       	adiw	r28, 0x30	; 48
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	de bf       	out	0x3e, r29	; 62
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <.L36>:
        repr_cmd_buf[i].c = commands[i].c;
 478:	fc 01       	movw	r30, r24
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	e8 0f       	add	r30, r24
 480:	f9 1f       	adc	r31, r25
 482:	a1 e0       	ldi	r26, 0x01	; 1
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	ac 0f       	add	r26, r28
 488:	bd 1f       	adc	r27, r29
 48a:	ea 0f       	add	r30, r26
 48c:	fb 1f       	adc	r31, r27

0000048e <.Loc.168>:
 48e:	58 9f       	mul	r21, r24
 490:	d0 01       	movw	r26, r0
 492:	59 9f       	mul	r21, r25
 494:	b0 0d       	add	r27, r0
 496:	11 24       	eor	r1, r1
 498:	a0 5f       	subi	r26, 0xF0	; 240
 49a:	bf 4d       	sbci	r27, 0xDF	; 223

0000049c <.Loc.169>:
 49c:	8c 91       	ld	r24, X
 49e:	80 83       	st	Z, r24

000004a0 <.Loc.170>:
        repr_cmd_buf[i].len = commands[i].len;
 4a0:	11 96       	adiw	r26, 0x01	; 1
 4a2:	8c 91       	ld	r24, X
 4a4:	11 97       	sbiw	r26, 0x01	; 1
 4a6:	81 83       	std	Z+1, r24	; 0x01

000004a8 <.Loc.172>:
        repr_cmd_buf[i].flags = commands[i].flags;
 4a8:	15 96       	adiw	r26, 0x05	; 5
 4aa:	8c 91       	ld	r24, X
 4ac:	82 83       	std	Z+2, r24	; 0x02

000004ae <.Loc.174>:
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 4ae:	4f 5f       	subi	r20, 0xFF	; 255

000004b0 <.Loc.176>:
 4b0:	ce cf       	rjmp	.-100    	; 0x44e <.L35>

000004b2 <simpleserial_get>:
{
 4b2:	af 92       	push	r10

000004b4 <.LCFI13>:
 4b4:	bf 92       	push	r11

000004b6 <.LCFI14>:
 4b6:	cf 92       	push	r12

000004b8 <.LCFI15>:
 4b8:	df 92       	push	r13

000004ba <.LCFI16>:
 4ba:	ef 92       	push	r14

000004bc <.LCFI17>:
 4bc:	ff 92       	push	r15

000004be <.LCFI18>:
 4be:	0f 93       	push	r16

000004c0 <.LCFI19>:
 4c0:	1f 93       	push	r17

000004c2 <.LCFI20>:
 4c2:	cf 93       	push	r28

000004c4 <.LCFI21>:
 4c4:	df 93       	push	r29

000004c6 <.LCFI22>:
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62

000004ca <.LCFI23>:
 4ca:	c1 54       	subi	r28, 0x41	; 65
 4cc:	d2 40       	sbci	r29, 0x02	; 2

000004ce <.LCFI24>:
 4ce:	cd bf       	out	0x3d, r28	; 61
 4d0:	de bf       	out	0x3e, r29	; 62

000004d2 <.Loc.178>:
	c = getch();
 4d2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <input_ch_0>

000004d6 <.LVL68>:
	for(cmd = 0; cmd < num_commands; cmd++)
 4d6:	40 91 70 20 	lds	r20, 0x2070	; 0x802070 <num_commands>
 4da:	50 91 71 20 	lds	r21, 0x2071	; 0x802071 <num_commands+0x1>
 4de:	20 e1       	ldi	r18, 0x10	; 16
 4e0:	30 e2       	ldi	r19, 0x20	; 32

000004e2 <.Loc.186>:
 4e2:	10 e0       	ldi	r17, 0x00	; 0
 4e4:	00 e0       	ldi	r16, 0x00	; 0

000004e6 <.L38>:
 4e6:	04 17       	cp	r16, r20
 4e8:	15 07       	cpc	r17, r21
 4ea:	94 f0       	brlt	.+36     	; 0x510 <.L42>

000004ec <.Loc.189>:
	if(cmd == num_commands)
 4ec:	40 17       	cp	r20, r16
 4ee:	51 07       	cpc	r21, r17
 4f0:	b1 f4       	brne	.+44     	; 0x51e <.L44>

000004f2 <.L37>:
}
 4f2:	cf 5b       	subi	r28, 0xBF	; 191
 4f4:	dd 4f       	sbci	r29, 0xFD	; 253
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	08 95       	ret

00000510 <.L42>:
		if(commands[cmd].c == c)
 510:	2a 5f       	subi	r18, 0xFA	; 250
 512:	3f 4f       	sbci	r19, 0xFF	; 255

00000514 <.Loc.193>:
 514:	f9 01       	movw	r30, r18
 516:	36 97       	sbiw	r30, 0x06	; 6

00000518 <.Loc.194>:
 518:	90 81       	ld	r25, Z
 51a:	98 13       	cpse	r25, r24
 51c:	7c c0       	rjmp	.+248    	; 0x616 <.L39>

0000051e <.L44>:
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 51e:	26 e0       	ldi	r18, 0x06	; 6
 520:	20 9f       	mul	r18, r16
 522:	c0 01       	movw	r24, r0
 524:	21 9f       	mul	r18, r17
 526:	90 0d       	add	r25, r0
 528:	11 24       	eor	r1, r1

0000052a <.LVL72>:
 52a:	9c 01       	movw	r18, r24
 52c:	20 5f       	subi	r18, 0xF0	; 240
 52e:	3f 4d       	sbci	r19, 0xDF	; 223
 530:	79 01       	movw	r14, r18

00000532 <.Loc.198>:
 532:	d9 01       	movw	r26, r18
 534:	15 96       	adiw	r26, 0x05	; 5
 536:	8c 91       	ld	r24, X
 538:	80 ff       	sbrs	r24, 0
 53a:	20 c0       	rjmp	.+64     	; 0x57c <.L41>

0000053c <.LBB10>:
		uint8_t l = 0;
 53c:	cf 57       	subi	r28, 0x7F	; 127
 53e:	de 4f       	sbci	r29, 0xFE	; 254
 540:	18 82       	st	Y, r1
 542:	c1 58       	subi	r28, 0x81	; 129
 544:	d1 40       	sbci	r29, 0x01	; 1

00000546 <.Loc.201>:
		buff[0] = getch();
 546:	0e 94 52 03 	call	0x6a4	; 0x6a4 <input_ch_0>

0000054a <.LVL73>:
 54a:	89 83       	std	Y+1, r24	; 0x01

0000054c <.Loc.205>:
		buff[1] = getch();
 54c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <input_ch_0>

00000550 <.LVL74>:
 550:	8a 83       	std	Y+2, r24	; 0x02

00000552 <.Loc.208>:
		if (hex_decode(1, buff, &l))
 552:	ae 01       	movw	r20, r28
 554:	4f 57       	subi	r20, 0x7F	; 127
 556:	5e 4f       	sbci	r21, 0xFE	; 254
 558:	be 01       	movw	r22, r28
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 54 01 	call	0x2a8	; 0x2a8 <hex_decode>

00000566 <.LVL75>:
 566:	89 2b       	or	r24, r25
 568:	21 f6       	brne	.-120    	; 0x4f2 <.L37>

0000056a <.Loc.211>:
		commands[cmd].len = l;
 56a:	cf 57       	subi	r28, 0x7F	; 127
 56c:	de 4f       	sbci	r29, 0xFE	; 254
 56e:	88 81       	ld	r24, Y
 570:	c1 58       	subi	r28, 0x81	; 129
 572:	d1 40       	sbci	r29, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	f7 01       	movw	r30, r14
 578:	81 83       	std	Z+1, r24	; 0x01
 57a:	92 83       	std	Z+2, r25	; 0x02

0000057c <.L41>:
 57c:	9e 01       	movw	r18, r28
 57e:	2f 5f       	subi	r18, 0xFF	; 255
 580:	3f 4f       	sbci	r19, 0xFF	; 255
 582:	59 01       	movw	r10, r18

00000584 <.LBE10>:
	for(cmd = 0; cmd < num_commands; cmd++)
 584:	f1 2c       	mov	r15, r1
 586:	e1 2c       	mov	r14, r1

00000588 <.LBB11>:
	for(int i = 0; i < 2*commands[cmd].len; i++)
 588:	26 e0       	ldi	r18, 0x06	; 6
 58a:	20 9f       	mul	r18, r16
 58c:	c0 01       	movw	r24, r0
 58e:	21 9f       	mul	r18, r17
 590:	90 0d       	add	r25, r0
 592:	11 24       	eor	r1, r1
 594:	dc 01       	movw	r26, r24
 596:	af 5e       	subi	r26, 0xEF	; 239
 598:	bf 4d       	sbci	r27, 0xDF	; 223
 59a:	6d 01       	movw	r12, r26

0000059c <.L47>:
 59c:	d6 01       	movw	r26, r12
 59e:	8d 91       	ld	r24, X+
 5a0:	9c 91       	ld	r25, X
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25

000005a6 <.Loc.217>:
 5a6:	e8 16       	cp	r14, r24
 5a8:	f9 06       	cpc	r15, r25
 5aa:	c0 f1       	brcs	.+112    	; 0x61c <.L48>

000005ac <.LBE11>:
	c = getch();
 5ac:	0e 94 52 03 	call	0x6a4	; 0x6a4 <input_ch_0>

000005b0 <.LVL77>:
	if(c != '\n' && c != '\r')
 5b0:	8a 30       	cpi	r24, 0x0A	; 10
 5b2:	19 f0       	breq	.+6      	; 0x5ba <.L49>

000005b4 <.Loc.222>:
 5b4:	8d 30       	cpi	r24, 0x0D	; 13
 5b6:	09 f0       	breq	.+2      	; 0x5ba <.L49>

000005b8 <L0^A>:
 5b8:	9c cf       	rjmp	.-200    	; 0x4f2 <.L37>

000005ba <.L49>:
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 5ba:	26 e0       	ldi	r18, 0x06	; 6
 5bc:	20 9f       	mul	r18, r16
 5be:	c0 01       	movw	r24, r0
 5c0:	21 9f       	mul	r18, r17
 5c2:	90 0d       	add	r25, r0
 5c4:	11 24       	eor	r1, r1

000005c6 <.LVL78>:
 5c6:	8c 01       	movw	r16, r24

000005c8 <.LVL79>:
 5c8:	00 5f       	subi	r16, 0xF0	; 240
 5ca:	1f 4d       	sbci	r17, 0xDF	; 223
 5cc:	f8 01       	movw	r30, r16
 5ce:	f1 80       	ldd	r15, Z+1	; 0x01

000005d0 <.Loc.227>:
 5d0:	ae 01       	movw	r20, r28
 5d2:	4f 57       	subi	r20, 0x7F	; 127
 5d4:	5e 4f       	sbci	r21, 0xFE	; 254
 5d6:	be 01       	movw	r22, r28
 5d8:	6f 5f       	subi	r22, 0xFF	; 255
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 2d       	mov	r24, r15
 5de:	92 81       	ldd	r25, Z+2	; 0x02
 5e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <hex_decode>

000005e4 <.LVL80>:
 5e4:	89 2b       	or	r24, r25
 5e6:	09 f0       	breq	.+2      	; 0x5ea <.Loc.229>

000005e8 <L0^A>:
 5e8:	84 cf       	rjmp	.-248    	; 0x4f2 <.L37>

000005ea <.Loc.229>:
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 5ea:	d8 01       	movw	r26, r16
 5ec:	13 96       	adiw	r26, 0x03	; 3
 5ee:	ed 91       	ld	r30, X+
 5f0:	fc 91       	ld	r31, X
 5f2:	6f 2d       	mov	r22, r15
 5f4:	ce 01       	movw	r24, r28
 5f6:	8f 57       	subi	r24, 0x7F	; 127
 5f8:	9e 4f       	sbci	r25, 0xFE	; 254
 5fa:	19 95       	eicall

000005fc <.LVL81>:
 5fc:	cf 5b       	subi	r28, 0xBF	; 191
 5fe:	dd 4f       	sbci	r29, 0xFD	; 253
 600:	88 83       	st	Y, r24
 602:	c1 54       	subi	r28, 0x41	; 65
 604:	d2 40       	sbci	r29, 0x02	; 2

00000606 <.Loc.233>:
	simpleserial_put('z', 1, ret);
 606:	ae 01       	movw	r20, r28
 608:	4f 5b       	subi	r20, 0xBF	; 191
 60a:	5d 4f       	sbci	r21, 0xFD	; 253
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	8a e7       	ldi	r24, 0x7A	; 122
 610:	0e 94 d6 01 	call	0x3ac	; 0x3ac <simpleserial_put>

00000614 <.LVL82>:
 614:	6e cf       	rjmp	.-292    	; 0x4f2 <.L37>

00000616 <.L39>:
	for(cmd = 0; cmd < num_commands; cmd++)
 616:	0f 5f       	subi	r16, 0xFF	; 255
 618:	1f 4f       	sbci	r17, 0xFF	; 255

0000061a <.Loc.236>:
 61a:	65 cf       	rjmp	.-310    	; 0x4e6 <.L38>

0000061c <.L48>:
		c = getch();
 61c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <input_ch_0>

00000620 <.LVL86>:
		if(c == '\n' || c == '\r')
 620:	8a 30       	cpi	r24, 0x0A	; 10
 622:	09 f4       	brne	.+2      	; 0x626 <.Loc.241>

00000624 <L0^A>:
 624:	66 cf       	rjmp	.-308    	; 0x4f2 <.L37>

00000626 <.Loc.241>:
 626:	8d 30       	cpi	r24, 0x0D	; 13
 628:	09 f4       	brne	.+2      	; 0x62c <.Loc.242>

0000062a <L0^A>:
 62a:	63 cf       	rjmp	.-314    	; 0x4f2 <.L37>

0000062c <.Loc.242>:
		ascii_buf[i] = c;
 62c:	f5 01       	movw	r30, r10
 62e:	81 93       	st	Z+, r24
 630:	5f 01       	movw	r10, r30

00000632 <.Loc.244>:
	for(int i = 0; i < 2*commands[cmd].len; i++)
 632:	ff ef       	ldi	r31, 0xFF	; 255
 634:	ef 1a       	sub	r14, r31
 636:	ff 0a       	sbc	r15, r31

00000638 <.Loc.246>:
 638:	b1 cf       	rjmp	.-158    	; 0x59c <.L47>

0000063a <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 63a:	e0 e4       	ldi	r30, 0x40	; 64
 63c:	f6 e0       	ldi	r31, 0x06	; 6
 63e:	88 e0       	ldi	r24, 0x08	; 8
 640:	81 83       	std	Z+1, r24	; 0x01

00000642 <.Loc.3>:

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 642:	84 e0       	ldi	r24, 0x04	; 4
 644:	82 83       	std	Z+2, r24	; 0x02

00000646 <.Loc.5>:

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 646:	e0 ea       	ldi	r30, 0xA0	; 160
 648:	f8 e0       	ldi	r31, 0x08	; 8
 64a:	83 e0       	ldi	r24, 0x03	; 3
 64c:	85 83       	std	Z+5, r24	; 0x05

0000064e <.Loc.6>:
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_0
	USART_Baudrate_Set(&USART, 1, 0);
	#else
	USART_Baudrate_Set(&USART, 11, 0);
 64e:	8b e0       	ldi	r24, 0x0B	; 11
 650:	86 83       	std	Z+6, r24	; 0x06

00000652 <.Loc.7>:
 652:	17 82       	std	Z+7, r1	; 0x07

00000654 <.Loc.8>:
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 654:	84 81       	ldd	r24, Z+4	; 0x04
 656:	80 61       	ori	r24, 0x10	; 16
 658:	84 83       	std	Z+4, r24	; 0x04

0000065a <.Loc.9>:
	USART_Tx_Enable(&USART);
 65a:	84 81       	ldd	r24, Z+4	; 0x04
 65c:	88 60       	ori	r24, 0x08	; 8
 65e:	84 83       	std	Z+4, r24	; 0x04

00000660 <.Loc.10>:
   }
 660:	08 95       	ret

00000662 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 662:	cf 93       	push	r28

00000664 <.LCFI0>:
 664:	df 93       	push	r29

00000666 <.LCFI1>:
 666:	0f 92       	push	r0
 668:	0f 92       	push	r0

0000066a <.LCFI2>:
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62

0000066e <.LCFI3>:
 66e:	fc 01       	movw	r30, r24
 670:	69 83       	std	Y+1, r22	; 0x01
 672:	7a 83       	std	Y+2, r23	; 0x02

00000674 <.LVL1>:
   unsigned int				timeout_counter = 0;
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	80 e0       	ldi	r24, 0x00	; 0

00000678 <.L3>:

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 678:	29 81       	ldd	r18, Y+1	; 0x01
 67a:	3a 81       	ldd	r19, Y+2	; 0x02

0000067c <.Loc.18>:
 67c:	28 17       	cp	r18, r24
 67e:	39 07       	cpc	r19, r25
 680:	11 f4       	brne	.+4      	; 0x686 <.L6>

00000682 <.Loc.19>:
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
 682:	80 e0       	ldi	r24, 0x00	; 0

00000684 <.LVL3>:
 684:	08 c0       	rjmp	.+16     	; 0x696 <.L2>

00000686 <.L6>:
		if (USART_IsRXComplete(&USART))
 686:	20 91 a1 08 	lds	r18, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>

0000068a <.Loc.23>:
 68a:	27 ff       	sbrs	r18, 7
 68c:	09 c0       	rjmp	.+18     	; 0x6a0 <.L4>

0000068e <.Loc.24>:
			*data = USART_GetChar(&USART);
 68e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>

00000692 <.LVL5>:
 692:	80 83       	st	Z, r24

00000694 <.Loc.27>:
			return BYTE_REC;
 694:	81 e0       	ldi	r24, 0x01	; 1

00000696 <.L2>:
	}
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <.L4>:
		timeout_counter++;
 6a0:	01 96       	adiw	r24, 0x01	; 1

000006a2 <.Loc.32>:
 6a2:	ea cf       	rjmp	.-44     	; 0x678 <.L3>

000006a4 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 6a4:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>

000006a8 <.Loc.36>:
 6a8:	87 ff       	sbrs	r24, 7
 6aa:	fc cf       	rjmp	.-8      	; 0x6a4 <input_ch_0>

000006ac <.Loc.37>:
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 6ac:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>

000006b0 <.Loc.39>:
	}
 6b0:	08 95       	ret

000006b2 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 6b2:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>

000006b6 <.Loc.45>:
 6b6:	95 ff       	sbrs	r25, 5
 6b8:	fc cf       	rjmp	.-8      	; 0x6b2 <output_ch_0>

000006ba <.Loc.46>:
	USART_PutChar(&USART, data);
 6ba:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>

000006be <.Loc.47>:
	return;
 6be:	08 95       	ret

000006c0 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 6c0:	fc 01       	movw	r30, r24

000006c2 <.Loc.2>:
	usart_data->usart = usart;
 6c2:	60 83       	st	Z, r22
 6c4:	71 83       	std	Z+1, r23	; 0x01

000006c6 <.Loc.4>:
	usart_data->dreIntLevel = dreIntLevel;
 6c6:	42 83       	std	Z+2, r20	; 0x02

000006c8 <.Loc.6>:

	usart_data->buffer.RX_Tail = 0;
 6c8:	14 86       	std	Z+12, r1	; 0x0c

000006ca <.Loc.8>:
	usart_data->buffer.RX_Head = 0;
 6ca:	13 86       	std	Z+11, r1	; 0x0b

000006cc <.Loc.10>:
	usart_data->buffer.TX_Tail = 0;
 6cc:	16 86       	std	Z+14, r1	; 0x0e

000006ce <.Loc.12>:
	usart_data->buffer.TX_Head = 0;
 6ce:	15 86       	std	Z+13, r1	; 0x0d

000006d0 <.Loc.14>:
}
 6d0:	08 95       	ret

000006d2 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 6d2:	fc 01       	movw	r30, r24
 6d4:	62 83       	std	Z+2, r22	; 0x02

000006d6 <.Loc.18>:
}
 6d6:	08 95       	ret

000006d8 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 6d8:	fc 01       	movw	r30, r24

000006da <.Loc.21>:
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 6da:	95 85       	ldd	r25, Z+13	; 0x0d

000006dc <.LVL3>:
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 6dc:	26 85       	ldd	r18, Z+14	; 0x0e

000006de <.LVL4>:
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 6de:	9f 5f       	subi	r25, 0xFF	; 255

000006e0 <.LVL5>:
 6e0:	93 70       	andi	r25, 0x03	; 3

000006e2 <.LVL6>:

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 6e2:	81 e0       	ldi	r24, 0x01	; 1

000006e4 <.LVL7>:
 6e4:	92 13       	cpse	r25, r18
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <.L4>
 6e8:	80 e0       	ldi	r24, 0x00	; 0

000006ea <.L4>:
}
 6ea:	08 95       	ret

000006ec <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 6ec:	1f 93       	push	r17

000006ee <.LCFI0>:
 6ee:	cf 93       	push	r28

000006f0 <.LCFI1>:
 6f0:	df 93       	push	r29

000006f2 <.LCFI2>:
 6f2:	ec 01       	movw	r28, r24
 6f4:	16 2f       	mov	r17, r22

000006f6 <.LVL9>:
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 6f6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <USART_TXBuffer_FreeSpace>

000006fa <.LVL10>:


	if(TXBuffer_FreeSpace)
 6fa:	88 23       	and	r24, r24
 6fc:	79 f0       	breq	.+30     	; 0x71c <.L5>

000006fe <.Loc.42>:
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 6fe:	9d 85       	ldd	r25, Y+13	; 0x0d

00000700 <.LVL11>:
	  	TXbufPtr->TX[tempTX_Head]= data;
 700:	fe 01       	movw	r30, r28
 702:	e9 0f       	add	r30, r25
 704:	f1 1d       	adc	r31, r1
 706:	17 83       	std	Z+7, r17	; 0x07

00000708 <.Loc.46>:
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 708:	9f 5f       	subi	r25, 0xFF	; 255

0000070a <.LVL12>:
 70a:	93 70       	andi	r25, 0x03	; 3

0000070c <.LVL13>:
 70c:	9d 87       	std	Y+13, r25	; 0x0d

0000070e <.Loc.50>:

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 70e:	e8 81       	ld	r30, Y
 710:	f9 81       	ldd	r31, Y+1	; 0x01

00000712 <.Loc.52>:
 712:	93 81       	ldd	r25, Z+3	; 0x03

00000714 <.LVL14>:
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 714:	9c 7f       	andi	r25, 0xFC	; 252

00000716 <.LVL15>:
 716:	2a 81       	ldd	r18, Y+2	; 0x02
 718:	92 2b       	or	r25, r18

0000071a <.LVL16>:
		usart_data->usart->CTRLA = tempCTRLA;
 71a:	93 83       	std	Z+3, r25	; 0x03

0000071c <.L5>:
	}
	return TXBuffer_FreeSpace;
}
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28

00000720 <.LVL18>:
 720:	1f 91       	pop	r17

00000722 <.LVL19>:
 722:	08 95       	ret

00000724 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
 724:	fc 01       	movw	r30, r24

00000726 <.Loc.64>:
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 726:	23 85       	ldd	r18, Z+11	; 0x0b

00000728 <.LVL21>:
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 728:	94 85       	ldd	r25, Z+12	; 0x0c

0000072a <.LVL22>:

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 72a:	81 e0       	ldi	r24, 0x01	; 1

0000072c <.LVL23>:
 72c:	29 13       	cpse	r18, r25
 72e:	01 c0       	rjmp	.+2      	; 0x732 <.L11>
 730:	80 e0       	ldi	r24, 0x00	; 0

00000732 <.L11>:
}
 732:	08 95       	ret

00000734 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 734:	fc 01       	movw	r30, r24

00000736 <.LVL25>:
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 736:	a4 85       	ldd	r26, Z+12	; 0x0c

00000738 <.Loc.79>:
 738:	a8 0f       	add	r26, r24
 73a:	b9 2f       	mov	r27, r25
 73c:	b1 1d       	adc	r27, r1
 73e:	13 96       	adiw	r26, 0x03	; 3
 740:	8c 91       	ld	r24, X

00000742 <.LVL26>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 742:	94 85       	ldd	r25, Z+12	; 0x0c

00000744 <.Loc.82>:
 744:	9f 5f       	subi	r25, 0xFF	; 255

00000746 <.Loc.83>:
 746:	93 70       	andi	r25, 0x03	; 3

00000748 <.Loc.84>:
 748:	94 87       	std	Z+12, r25	; 0x0c

0000074a <.Loc.85>:

	return ans;
}
 74a:	08 95       	ret

0000074c <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 74c:	fc 01       	movw	r30, r24

0000074e <.LVL28>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 74e:	83 85       	ldd	r24, Z+11	; 0x0b

00000750 <.LVL29>:
 750:	8f 5f       	subi	r24, 0xFF	; 255

00000752 <.Loc.95>:
 752:	83 70       	andi	r24, 0x03	; 3

00000754 <.LVL30>:

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 754:	24 85       	ldd	r18, Z+12	; 0x0c

00000756 <.LVL31>:
	uint8_t data = usart_data->usart->DATA;
 756:	a0 81       	ld	r26, Z
 758:	b1 81       	ldd	r27, Z+1	; 0x01

0000075a <.Loc.100>:
 75a:	9c 91       	ld	r25, X

0000075c <.LVL32>:

	if (tempRX_Head == tempRX_Tail) {
 75c:	82 17       	cp	r24, r18
 75e:	49 f0       	breq	.+18     	; 0x772 <.L15>

00000760 <.LVL33>:
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 760:	a3 85       	ldd	r26, Z+11	; 0x0b

00000762 <.Loc.106>:
 762:	ae 0f       	add	r26, r30
 764:	bf 2f       	mov	r27, r31
 766:	b1 1d       	adc	r27, r1
 768:	13 96       	adiw	r26, 0x03	; 3
 76a:	9c 93       	st	X, r25

0000076c <.Loc.107>:
		usart_data->buffer.RX_Head = tempRX_Head;
 76c:	83 87       	std	Z+11, r24	; 0x0b

0000076e <.Loc.109>:
		ans = true;
 76e:	81 e0       	ldi	r24, 0x01	; 1

00000770 <.LVL34>:
 770:	08 95       	ret

00000772 <.L15>:
	  	ans = false;
 772:	80 e0       	ldi	r24, 0x00	; 0

00000774 <.LVL36>:
	}
	return ans;
}
 774:	08 95       	ret

00000776 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 776:	cf 93       	push	r28

00000778 <.LCFI3>:
 778:	df 93       	push	r29

0000077a <.LCFI4>:
 77a:	fc 01       	movw	r30, r24

0000077c <.LVL38>:
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 77c:	86 85       	ldd	r24, Z+14	; 0x0e

0000077e <.LVL39>:
	if (bufPtr->TX_Head == tempTX_Tail){
 77e:	95 85       	ldd	r25, Z+13	; 0x0d
 780:	a0 81       	ld	r26, Z
 782:	b1 81       	ldd	r27, Z+1	; 0x01

00000784 <.Loc.122>:
 784:	98 13       	cpse	r25, r24
 786:	09 c0       	rjmp	.+18     	; 0x79a <.L17>

00000788 <.LBB2>:
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 788:	13 96       	adiw	r26, 0x03	; 3
 78a:	8c 91       	ld	r24, X
 78c:	13 97       	sbiw	r26, 0x03	; 3

0000078e <.LVL40>:
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 78e:	8c 7f       	andi	r24, 0xFC	; 252

00000790 <.Loc.127>:
		usart_data->usart->CTRLA = tempCTRLA;
 790:	13 96       	adiw	r26, 0x03	; 3
 792:	8c 93       	st	X, r24

00000794 <.L16>:
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <.L17>:
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 79a:	c6 85       	ldd	r28, Z+14	; 0x0e

0000079c <.Loc.133>:
 79c:	ce 0f       	add	r28, r30
 79e:	df 2f       	mov	r29, r31
 7a0:	d1 1d       	adc	r29, r1
 7a2:	8f 81       	ldd	r24, Y+7	; 0x07

000007a4 <.LVL44>:
		usart_data->usart->DATA = data;
 7a4:	8c 93       	st	X, r24

000007a6 <.Loc.136>:
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 7a6:	86 85       	ldd	r24, Z+14	; 0x0e

000007a8 <.LVL45>:
 7a8:	8f 5f       	subi	r24, 0xFF	; 255

000007aa <.Loc.139>:
 7aa:	83 70       	andi	r24, 0x03	; 3

000007ac <.Loc.140>:
 7ac:	86 87       	std	Z+14, r24	; 0x0e

000007ae <.LBE3>:
}
 7ae:	f2 cf       	rjmp	.-28     	; 0x794 <.L16>

000007b0 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 7b0:	fc 01       	movw	r30, r24
 7b2:	cb 01       	movw	r24, r22

000007b4 <.LVL48>:
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 7b4:	24 81       	ldd	r18, Z+4	; 0x04

000007b6 <.Loc.147>:
	if(data & 0x0100) {
 7b6:	70 ff       	sbrs	r23, 0
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <.L20>

000007ba <.Loc.148>:
		usart->CTRLB |= USART_TXB8_bm;
 7ba:	21 60       	ori	r18, 0x01	; 1

000007bc <.L22>:
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 7bc:	24 83       	std	Z+4, r18	; 0x04

000007be <.Loc.151>:
	}

	usart->DATA = (data & 0x00FF);
 7be:	80 83       	st	Z, r24

000007c0 <.Loc.153>:
}
 7c0:	08 95       	ret

000007c2 <.L20>:
		usart->CTRLB &= ~USART_TXB8_bm;
 7c2:	2e 7f       	andi	r18, 0xFE	; 254
 7c4:	fb cf       	rjmp	.-10     	; 0x7bc <.L22>

000007c6 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 7c6:	fc 01       	movw	r30, r24

000007c8 <.Loc.158>:
	if(usart->CTRLB & USART_RXB8_bm) {
 7c8:	84 81       	ldd	r24, Z+4	; 0x04

000007ca <.LVL50>:
 7ca:	80 ff       	sbrs	r24, 0
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <.L24>

000007ce <.Loc.161>:
		return(0x0100 | usart->DATA);
 7ce:	80 81       	ld	r24, Z
 7d0:	90 e0       	ldi	r25, 0x00	; 0

000007d2 <.Loc.163>:
 7d2:	91 60       	ori	r25, 0x01	; 1
 7d4:	08 95       	ret

000007d6 <.L24>:
	}else {
		return(usart->DATA);
 7d6:	80 81       	ld	r24, Z
 7d8:	90 e0       	ldi	r25, 0x00	; 0

000007da <.Loc.166>:
	}
}
 7da:	08 95       	ret

000007dc <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 7dc:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>

000007e0 <.Loc.3>:
    OSC.PLLCTRL = 0x00;
 7e0:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>

000007e4 <.Loc.5>:
    OSC.CTRL |= OSC_XOSCEN_bm;
 7e4:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 7e8:	88 60       	ori	r24, 0x08	; 8
 7ea:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

000007ee <.L2>:
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 7ee:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

000007f2 <.Loc.11>:
 7f2:	83 ff       	sbrs	r24, 3
 7f4:	fc cf       	rjmp	.-8      	; 0x7ee <.L2>

000007f6 <.Loc.12>:
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 7f6:	88 ed       	ldi	r24, 0xD8	; 216
 7f8:	84 bf       	out	0x34, r24	; 52

000007fa <.Loc.14>:
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000800 <.Loc.16>:
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 800:	88 e0       	ldi	r24, 0x08	; 8
 802:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000806 <.Loc.18>:
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
 806:	08 95       	ret

00000808 <main>:

int main(void) {
  // Setup the specific chipset.
  platform_init();
 808:	0e 94 ee 03 	call	0x7dc	; 0x7dc <platform_init>

0000080c <.LVL6>:
  // Setup serial communication line.
  init_uart();
 80c:	0e 94 1d 03 	call	0x63a	; 0x63a <init_uart0>

00000810 <.LVL7>:
  // Setup measurement trigger.
  trigger_setup();
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>

00000816 <.Loc.32>:

  simpleserial_init();
 816:	0e 94 c1 01 	call	0x382	; 0x382 <simpleserial_init>

0000081a <.LVL8>:

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 81a:	4f e0       	ldi	r20, 0x0F	; 15
 81c:	51 e0       	ldi	r21, 0x01	; 1
 81e:	60 e1       	ldi	r22, 0x10	; 16
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	80 e7       	ldi	r24, 0x70	; 112
 824:	0e 94 be 01 	call	0x37c	; 0x37c <simpleserial_addcmd>

00000828 <.L6>:

  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 828:	0e 94 59 02 	call	0x4b2	; 0x4b2 <simpleserial_get>

0000082c <.LVL10>:
  while (1)
 82c:	fd cf       	rjmp	.-6      	; 0x828 <.L6>

0000082e <_exit>:
 82e:	f8 94       	cli

00000830 <__stop_program>:
 830:	ff cf       	rjmp	.-2      	; 0x830 <__stop_program>
